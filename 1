ERROR: MethodError: no method matching diagm(::Pair{Vector{Float64}, Int64})
Closest candidates are:
  diagm(::Any, ::Any, ::Pair{var"#s12", var"#s11"} where {var"#s12"<:Integer, var"#s11"<:ChainRulesCore.AbstractThunk}, ::Pair{var"#s4", var"#s3"} where {var"#s4"<:Integer, var"#s3"<:ChainRulesCore.AbstractThunk}...) at /Users/hanna/.julia/packages/ChainRulesCore/uxrij/src/tangent_types/thunks.jl:70
  diagm(::Integer, ::Integer, ::Pair{var"#s814", var"#s813"} where {var"#s814"<:Integer, var"#s813"<:(AbstractVector{T} where T)}...) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/dense.jl:280
  diagm(::Integer, ::Integer, ::AbstractVector{T} where T) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/dense.jl:330
  ...
Stacktrace:
 [1] _broadcast_getindex_evalf
   @ ./broadcast.jl:648 [inlined]
 [2] _broadcast_getindex
   @ ./broadcast.jl:621 [inlined]
 [3] getindex
   @ ./broadcast.jl:575 [inlined]
 [4] copy
   @ ./broadcast.jl:898 [inlined]
 [5] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(diagm), Tuple{Base.RefValue{Pair{Vector{Float64}, Int64}}}})
   @ Base.Broadcast ./broadcast.jl:883
 [6] top-level scope
   @ REPL[65]:1

julia> A = diagm(a) + diagm(-1=>b)
32×32 Matrix{Float64}:
 1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.1  2.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.1  3.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.1  4.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.1  5.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.1  6.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.1  7.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.1  8.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.1      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     27.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.1  28.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.1  29.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.1  30.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.1  31.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.1  32.0

julia> A = diagm(a) + diagm(-1=>b) + diagm(1=>b)
32×32 Matrix{Float64}:
 1.0  0.1  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.1  2.0  0.1  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.1  3.0  0.1  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.1  4.0  0.1  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.1  5.0  0.1  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.1  6.0  0.1  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.1  7.0  0.1      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.1  8.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.1      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.1   0.0   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     27.0   0.1   0.0   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.1  28.0   0.1   0.0   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.1  29.0   0.1   0.0   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.1  30.0   0.1   0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  …   0.0   0.0   0.0   0.1  31.0   0.1
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0      0.0   0.0   0.0   0.0   0.1  32.0

julia> eigval(A)
ERROR: UndefVarError: eigval not defined
Stacktrace:
 [1] top-level scope
   @ REPL[68]:1

julia> eigvals(A)
32-element Vector{Float64}:
  0.9900494253375478
  1.9999506574411643
  2.9999999172903977
  3.9999999999309246
  4.9999999999999645
  6.0000000000000036
  6.999999999999999
  7.999999999999999
  9.000000000000002
 10.0
 11.000000000000005
 11.999999999999995
 13.0
 14.000000000000007
 15.0
 15.99999999999999
 17.000000000000007
 18.000000000000007
 19.000000000000004
 19.999999999999996
 21.00000000000001
 21.99999999999999
 23.000000000000004
 23.99999999999999
 25.000000000000014
 25.99999999999997
 27.000000000000036
 27.999999999999993
 29.00000000006908
 30.000000082709622
 31.000049342558818
 32.009950574662476

julia> eig(A)
ERROR: UndefVarError: eig not defined
Stacktrace:
 [1] top-level scope
   @ REPL[70]:1

julia> eigen(A)
Eigen{Float64, Float64, Matrix{Float64}, Vector{Float64}}
values:
32-element Vector{Float64}:
  0.9900494253375476
  1.9999506574411656
  2.9999999172903964
  3.9999999999309237
  4.999999999999964
  5.9999999999999964
  7.0000000000000036
  8.000000000000004
  9.0
 10.000000000000002
 11.0
 12.00000000000001
 13.0
 14.000000000000004
 14.999999999999996
 16.000000000000007
 17.000000000000014
 18.000000000000004
 19.00000000000001
 20.000000000000007
 20.99999999999998
 22.000000000000007
 22.999999999999993
 24.0
 25.0
 26.000000000000007
 27.0
 28.000000000000036
 29.00000000006908
 30.0000000827096
 31.000049342558835
 32.009950574662454
vectors:
32×32 Matrix{Float64}:
  0.995074      0.0990135     0.004975     …   0.0          1.17391e-65
 -0.0990155     0.990086      0.0995           0.0          3.64029e-63
  0.00493443   -0.099502      0.990025         0.0          1.09244e-60
 -0.000164073   0.00498329   -0.0995008        0.0          3.16912e-58
  4.09369e-6   -0.000166246   0.00498335       0.0          8.87658e-56
 -8.17384e-8    4.15817e-6   -0.00016625   …   0.0          2.39753e-53
  1.36037e-9   -8.31903e-8    4.15834e-6       0.0          6.23587e-51
 -1.94098e-11   1.38682e-9   -8.31945e-8       0.0          1.55956e-48
  2.42354e-13  -1.98152e-11   1.38691e-9       0.0          3.74444e-46
 -2.69015e-15   2.47722e-13  -1.98165e-11      0.0          8.61579e-44
  2.68772e-17  -2.75276e-15   2.4774e-13   …   0.0          1.89629e-41
 -2.44136e-19   2.753e-17    -2.75298e-15      0.0          3.98402e-39
  2.03291e-21   0.0           2.75323e-17      0.0          7.97181e-37
 -1.56267e-23   0.0           0.0              0.0          1.5154e-34
  1.11545e-25   0.0           0.0              0.0          2.72914e-32
 -7.43172e-28   0.0           0.0          …   0.0          4.64211e-30
  4.64211e-30   0.0           0.0              0.0          7.43172e-28
 -2.72914e-32   0.0           0.0              0.0          1.11545e-25
  1.5154e-34    0.0           0.0              0.0          1.56267e-23
 -7.97181e-37   0.0           0.0              0.0          2.03291e-21
  3.98402e-39   0.0           0.0          …   2.753e-17    2.44136e-19
 -1.89629e-41   0.0           0.0              2.75276e-15  2.68772e-17
  8.61579e-44   0.0           0.0              2.47722e-13  2.69015e-15
 -3.74444e-46   0.0           0.0              1.98152e-11  2.42354e-13
  1.55956e-48   0.0           0.0              1.38682e-9   1.94098e-11
 -6.23587e-51   0.0           0.0          …   8.31903e-8   1.36037e-9
  2.39753e-53   0.0           0.0              4.15817e-6   8.17384e-8
 -8.87658e-56   0.0           0.0              0.000166246  4.09369e-6
  3.16912e-58   0.0           0.0              0.00498329   0.000164073
 -1.09244e-60   0.0           0.0              0.099502     0.00493443
  3.64029e-63   0.0           0.0          …   0.990086     0.0990155
 -1.17391e-65   0.0           0.0             -0.0990135    0.995074

julia> eigvec(A)
ERROR: UndefVarError: eigvec not defined
Stacktrace:
 [1] top-level scope
   @ REPL[72]:1

julia> eigenvec(A)
ERROR: UndefVarError: eigenvec not defined
Stacktrace:
 [1] top-level scope
   @ REPL[73]:1

julia> (vec,val) = eig(A)
ERROR: UndefVarError: eig not defined
Stacktrace:
 [1] top-level scope
   @ REPL[74]:1

julia> [vec, val] = eig(A)
ERROR: syntax: invalid assignment location "[vec, val]" around REPL[75]:1
Stacktrace:
 [1] top-level scope
   @ REPL[75]:1

julia> val, vec = eigen(A)
Eigen{Float64, Float64, Matrix{Float64}, Vector{Float64}}
values:
32-element Vector{Float64}:
  0.9900494253375476
  1.9999506574411656
  2.9999999172903964
  3.9999999999309237
  4.999999999999964
  5.9999999999999964
  7.0000000000000036
  8.000000000000004
  9.0
 10.000000000000002
 11.0
 12.00000000000001
 13.0
 14.000000000000004
 14.999999999999996
 16.000000000000007
 17.000000000000014
 18.000000000000004
 19.00000000000001
 20.000000000000007
 20.99999999999998
 22.000000000000007
 22.999999999999993
 24.0
 25.0
 26.000000000000007
 27.0
 28.000000000000036
 29.00000000006908
 30.0000000827096
 31.000049342558835
 32.009950574662454
vectors:
32×32 Matrix{Float64}:
  0.995074      0.0990135     0.004975     …   0.0          1.17391e-65
 -0.0990155     0.990086      0.0995           0.0          3.64029e-63
  0.00493443   -0.099502      0.990025         0.0          1.09244e-60
 -0.000164073   0.00498329   -0.0995008        0.0          3.16912e-58
  4.09369e-6   -0.000166246   0.00498335       0.0          8.87658e-56
 -8.17384e-8    4.15817e-6   -0.00016625   …   0.0          2.39753e-53
  1.36037e-9   -8.31903e-8    4.15834e-6       0.0          6.23587e-51
 -1.94098e-11   1.38682e-9   -8.31945e-8       0.0          1.55956e-48
  2.42354e-13  -1.98152e-11   1.38691e-9       0.0          3.74444e-46
 -2.69015e-15   2.47722e-13  -1.98165e-11      0.0          8.61579e-44
  2.68772e-17  -2.75276e-15   2.4774e-13   …   0.0          1.89629e-41
 -2.44136e-19   2.753e-17    -2.75298e-15      0.0          3.98402e-39
  2.03291e-21   0.0           2.75323e-17      0.0          7.97181e-37
 -1.56267e-23   0.0           0.0              0.0          1.5154e-34
  1.11545e-25   0.0           0.0              0.0          2.72914e-32
 -7.43172e-28   0.0           0.0          …   0.0          4.64211e-30
  4.64211e-30   0.0           0.0              0.0          7.43172e-28
 -2.72914e-32   0.0           0.0              0.0          1.11545e-25
  1.5154e-34    0.0           0.0              0.0          1.56267e-23
 -7.97181e-37   0.0           0.0              0.0          2.03291e-21
  3.98402e-39   0.0           0.0          …   2.753e-17    2.44136e-19
 -1.89629e-41   0.0           0.0              2.75276e-15  2.68772e-17
  8.61579e-44   0.0           0.0              2.47722e-13  2.69015e-15
 -3.74444e-46   0.0           0.0              1.98152e-11  2.42354e-13
  1.55956e-48   0.0           0.0              1.38682e-9   1.94098e-11
 -6.23587e-51   0.0           0.0          …   8.31903e-8   1.36037e-9
  2.39753e-53   0.0           0.0              4.15817e-6   8.17384e-8
 -8.87658e-56   0.0           0.0              0.000166246  4.09369e-6
  3.16912e-58   0.0           0.0              0.00498329   0.000164073
 -1.09244e-60   0.0           0.0              0.099502     0.00493443
  3.64029e-63   0.0           0.0          …   0.990086     0.0990155
 -1.17391e-65   0.0           0.0             -0.0990135    0.995074

julia> vec
32×32 Matrix{Float64}:
  0.995074      0.0990135     0.004975     …   0.0          1.17391e-65
 -0.0990155     0.990086      0.0995           0.0          3.64029e-63
  0.00493443   -0.099502      0.990025         0.0          1.09244e-60
 -0.000164073   0.00498329   -0.0995008        0.0          3.16912e-58
  4.09369e-6   -0.000166246   0.00498335       0.0          8.87658e-56
 -8.17384e-8    4.15817e-6   -0.00016625   …   0.0          2.39753e-53
  1.36037e-9   -8.31903e-8    4.15834e-6       0.0          6.23587e-51
 -1.94098e-11   1.38682e-9   -8.31945e-8       0.0          1.55956e-48
  2.42354e-13  -1.98152e-11   1.38691e-9       0.0          3.74444e-46
 -2.69015e-15   2.47722e-13  -1.98165e-11      0.0          8.61579e-44
  2.68772e-17  -2.75276e-15   2.4774e-13   …   0.0          1.89629e-41
 -2.44136e-19   2.753e-17    -2.75298e-15      0.0          3.98402e-39
  2.03291e-21   0.0           2.75323e-17      0.0          7.97181e-37
 -1.56267e-23   0.0           0.0              0.0          1.5154e-34
  1.11545e-25   0.0           0.0              0.0          2.72914e-32
 -7.43172e-28   0.0           0.0          …   0.0          4.64211e-30
  4.64211e-30   0.0           0.0              0.0          7.43172e-28
 -2.72914e-32   0.0           0.0              0.0          1.11545e-25
  1.5154e-34    0.0           0.0              0.0          1.56267e-23
 -7.97181e-37   0.0           0.0              0.0          2.03291e-21
  3.98402e-39   0.0           0.0          …   2.753e-17    2.44136e-19
 -1.89629e-41   0.0           0.0              2.75276e-15  2.68772e-17
  8.61579e-44   0.0           0.0              2.47722e-13  2.69015e-15
 -3.74444e-46   0.0           0.0              1.98152e-11  2.42354e-13
  1.55956e-48   0.0           0.0              1.38682e-9   1.94098e-11
 -6.23587e-51   0.0           0.0          …   8.31903e-8   1.36037e-9
  2.39753e-53   0.0           0.0              4.15817e-6   8.17384e-8
 -8.87658e-56   0.0           0.0              0.000166246  4.09369e-6
  3.16912e-58   0.0           0.0              0.00498329   0.000164073
 -1.09244e-60   0.0           0.0              0.099502     0.00493443
  3.64029e-63   0.0           0.0          …   0.990086     0.0990155
 -1.17391e-65   0.0           0.0             -0.0990135    0.995074

julia> vec(1)
ERROR: MethodError: objects of type Matrix{Float64} are not callable
Use square brackets [] for indexing an Array.
Stacktrace:
 [1] top-level scope
   @ REPL[78]:1

julia> q = fill(1,32)
32-element Vector{Int64}:
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1

julia> Q = diagm(q)
32×32 Matrix{Int64}:
 1  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  1  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  1  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  1  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  1  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  1  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  1  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  1  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  1     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  1  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  1  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  1  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  1  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  1  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  1  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  1  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  1

julia> (q_n) = [Q[:,n] for n in 1:size(Q,1)]
32-element Vector{Vector{Int64}}:
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 1]

julia> q_1
ERROR: UndefVarError: q_1 not defined

julia> q1
ERROR: UndefVarError: q1 not defined

julia> function q(n) = [Q[:,n] for n in 1:size(Q,1)]
ERROR: syntax: unexpected "="
Stacktrace:
 [1] top-level scope
   @ none:1

julia> function q(n) [Q[:,n] for n in 1:size(Q,1)]
ERROR: syntax: space before "[" not allowed in "q(n) [" at REPL[85]:1
Stacktrace:
 [1] top-level scope
   @ none:1

julia> function q(n)
           q(n) = Q[:,n]
           for n in 1:size(Q,1)
           println(q(n))
           push!(q(n))
           end
       end

ERROR: cannot define function q; it already has a value
Stacktrace:
 [1] top-level scope
   @ none:0
 [2] top-level scope
   @ REPL[86]:1

julia> function q(n)
           q(n) = Q[:,n]
           for n in 1:size(Q,1)
           println(q(n))
           push!(q(n))
           end
       end
ERROR: cannot define function q; it already has a value
Stacktrace:
 [1] top-level scope
   @ none:0
 [2] top-level scope
   @ REPL[86]:1

julia> (q_1)
ERROR: UndefVarError: q_1 not defined

julia> (q_n)
32-element Vector{Vector{Int64}}:
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 1]

julia> q_1 = [Q[:,1] for 1 in 1:size(Q,1)]
ERROR: syntax: invalid assignment location "1" around REPL[89]:1
Stacktrace:
 [1] top-level scope
   @ REPL[89]:1

julia> q_1 = [Q[:,n] for n in 1:size(Q,1)]
32-element Vector{Vector{Int64}}:
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 1]

julia> q_1 = [Q[:,n] for 1 in 1:size(Q,1)]
ERROR: syntax: invalid assignment location "1" around REPL[91]:1
Stacktrace:
 [1] top-level scope
   @ REPL[91]:1

julia> q_1 = [Q[:,1] for n in 1:size(Q,1)]
32-element Vector{Vector{Int64}}:
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

julia> q1 = Q[:1]
1

julia> q1 = Q[:1]'
1

julia> Q[:1]
1

julia> Q
32×32 Matrix{Int64}:
 1  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  1  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  1  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  1  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  1  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  1  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  1  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  1  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  1     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  1  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  1  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  1  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  1  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  1  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  1  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  1  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0  1

julia> q1 = Q[:,1]
32-element Vector{Int64}:
 1
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0

julia> h = q1'*A*q1
1.0

julia> h = q2'*A*q2
ERROR: UndefVarError: q2 not defined
Stacktrace:
 [1] top-level scope
   @ REPL[99]:1

julia> q2 = Q[:,2]
32-element Vector{Int64}:
 0
 1
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0
 0

julia> h = q2'*A*q2
2.0

julia> function q(n)
           q(n) = []
               for n in 1:size(Q,1)
               push!(q(n), Q[:,n])
           end
           return q(n)
       end
ERROR: cannot define function q; it already has a value
Stacktrace:
 [1] top-level scope
   @ none:0
 [2] top-level scope
   @ REPL[102]:1

julia> function z(n)
           z(n) = Q[]
               for n in 1:size(Q,1)
           push!(q(n), Q[:,n])
           end
       end
z (generic function with 1 method)

julia> function z(n)
           z(n) = []
               for n in 1:size(Q,1)
               push!(z(n), Q[:,n])
           end
           return z(n)
       end
z (generic function with 1 method)

julia> z(1)
Any[]

julia> function z(n)
           z(n) = [,n]
               for n in 1:size(Q,1)
               push!(z(n), Q[:,n])
           end
           return z(n)
       end
ERROR: syntax: unexpected ","
Stacktrace:
 [1] top-level scope
   @ none:1

julia> function z(n)
           z(n) = []
               for n in 1:size(Q,1)
               push!(z(n), Q[:,n])
           end
           return z(n)
       end
z (generic function with 1 method)

julia> using Revise

julia> includet("hw3.jl")
ERROR: LoadError: "incomplete: \"if\" at /Users/hanna/hw3.jl:14 requires end"
Stacktrace:
 [1] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1012
 [2] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [3] top-level scope
   @ REPL[109]:1
in expression starting at /Users/hanna/hw3.jl:52

caused by: LoadError: "incomplete: \"if\" at /Users/hanna/hw3.jl:14 requires end"
Stacktrace:
 [1] parse_source!(mod_exprs_sigs::OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Vector{Any}}}}, src::String, filename::String, mod::Module; mode::Symbol)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/parsing.jl:45
 [2] parse_source!(mod_exprs_sigs::OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Vector{Any}}}}, filename::String, mod::Module; kwargs::Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:mode,), Tuple{Symbol}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/parsing.jl:27
 [3] #parse_source#11
   @ ~/.julia/packages/Revise/jHTGK/src/parsing.jl:10 [inlined]
 [4] track(mod::Module, file::String; mode::Symbol, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:895
 [5] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:995
 [6] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [7] top-level scope
   @ REPL[109]:1
in expression starting at /Users/hanna/hw3.jl:52

julia> includet("/hw3.jl")
ERROR: /hw3.jl is not a file
Stacktrace:
 [1] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1012
 [2] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [3] top-level scope
   @ REPL[110]:1

caused by: /hw3.jl is not a file
Stacktrace:
 [1] error(::String, ::String)
   @ Base ./error.jl:42
 [2] track(mod::Module, file::String; mode::Symbol, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:876
 [3] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:995
 [4] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [5] top-level scope
   @ REPL[110]:1

julia> includet("~/hw3.jl")
ERROR: /Users/hanna/~/hw3.jl is not a file
Stacktrace:
 [1] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1012
 [2] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [3] top-level scope
   @ REPL[111]:1

caused by: /Users/hanna/~/hw3.jl is not a file
Stacktrace:
 [1] error(::String, ::String)
   @ Base ./error.jl:42
 [2] track(mod::Module, file::String; mode::Symbol, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:876
 [3] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:995
 [4] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [5] top-level scope
   @ REPL[111]:1

julia> includet("./hw3.jl")
ERROR: LoadError: "incomplete: \"if\" at /Users/hanna/hw3.jl:14 requires end"
Stacktrace:
 [1] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1012
 [2] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [3] top-level scope
   @ REPL[112]:1
in expression starting at /Users/hanna/hw3.jl:52

caused by: LoadError: "incomplete: \"if\" at /Users/hanna/hw3.jl:14 requires end"
Stacktrace:
 [1] parse_source!(mod_exprs_sigs::OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Vector{Any}}}}, src::String, filename::String, mod::Module; mode::Symbol)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/parsing.jl:45
 [2] parse_source!(mod_exprs_sigs::OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Vector{Any}}}}, filename::String, mod::Module; kwargs::Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:mode,), Tuple{Symbol}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/parsing.jl:27
 [3] #parse_source#11
   @ ~/.julia/packages/Revise/jHTGK/src/parsing.jl:10 [inlined]
 [4] track(mod::Module, file::String; mode::Symbol, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}})
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:895
 [5] includet(mod::Module, file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:995
 [6] includet(file::String)
   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1017
 [7] top-level scope
   @ REPL[112]:1
in expression starting at /Users/hanna/hw3.jl:52

julia> includet("/hw3.jl")
ERROR: /hw3.jl is not a file
Stacktrace:
 [1] includet(mod::Module, file::String)





















   @ Revise ~/.julia/packages/Revise/jHTGK/src/packagedef.jl:1012
 [2] includet(file::String)
 43 A = diagm(a) + diagm(-1=>b) + diagm(1=>b)
 44
 45 c=fill(2,32)
 56     println(Q[:,n])
 89
 92     Pr::precrT
108 end
111
117     # Check for termination first
134     # Implicitly computes the residual
137     g.k += 1
140     # and at restart.
148
158             init_residual!(g.residual, g.β)
179     arnoldi = ArnoldiDecomp(A, restart, T)
186     init_residual!(residual, residual.current)
187
188     tolerance = max(reltol * residual.current, abstol)
189
190     GMRESIterable(Pl, Pr, x, b, Ax,
193         orth_meth
196
197 """
198     gmres(A, b; kwargs...) -> x, [history]
213 - `b`: right-hand side.
214
219   residual vector;
220 - `abstol::Real = zero(real(eltype(b)))`,
221   `reltol::Real = sqrt(eps(real(eltype(b))))`: absolute and relative
225 - `maxiter::Int = size(A, 2)`: maximum number of inner iterations of GMRES;
240 - `x`: approximate solution;
252                 verbose::Bool = false,
255     history[:abstol] = abstol
258
262                                orth_meth = orth_meth)
263
283 function update_residual!(r::Residual, arnoldi::ArnoldiDecomp, k::Int)
289         r.accumulator += abs2(r.nullvec[k + 1])
297
303     if !initially_zero
311     β = norm(first_col)
312     first_col .*= inv(β)
318     r.β = β
323     rhs = zeros(T, k)
324     rhs[1] = β
142
 31         x = (im*i+1)/(im*i-1)
 32         println(x)
 33         push!(Re, real(x))
 34         push!(Im, imag(x))
 35     end
 36     return plot(Re,Im)
 37 end
 38
 39
 40 #hw3. p.7
 41 a = collect(1:32)
 42 b = fill(0.1,31)
 43 A = diagm(a) + diagm(-1=>b) + diagm(1=>b)
 44
 45 c=fill(2,32)
 46 d=fill(-1,31)
 47 B = diagm(c) + diagm(-1=>d) + diagm(1=>d)
 48
 49 q = fill(1,32)
 50 Q = diagm(q)
 51
 52 function q(n)
 53     for i in 1:size(Q,1)
 54     push!(Q[:,n])
 55     end
 56     println(Q[:,n])
 57 end
 58
 59 # 3.
 60
 61 p = fill(1,7)
 62 u = fill(1,1)
 63 A = zeros(8,8) + diagm(1 =>p) + diagm(-7=>u)
 64 d = [0 0 0 0 0 0 0 1]
 65
 66
 67
